// Generated by LiveScript 1.4.0
(function(){
  var helpers, h, async, _;
  helpers = h = require('./index.js');
  async = require('async');
  _ = require('underscore');
  exports.returnorcallback = function(test){
    var f1, f2;
    f1 = function(n){
      return n + 3;
    };
    f2 = function(n, callback){
      setTimeout(function(){
        return callback(undefined, n + 4);
      }, 100);
      return undefined;
    };
    return async.parallel({
      f1: helpers.forceCallbackWrap(f1, 1),
      f2: helpers.forceCallbackWrap(f2, 1)
    }, function(err, data){
      test.equals(err, undefined);
      test.deepEqual(data, {
        f1: 4,
        f2: 5
      });
      return test.done();
    });
  };
  exports.queue = function(test){
    var queue, triggered, testf;
    queue = new helpers.queue({
      size: 3
    });
    triggered = {};
    testf = function(name, time, err, data){
      return function(callback){
        console.log("f " + name + " starting");
        return helpers.wait(time, function(){
          console.log("f " + name + " done");
          triggered[name] = true;
          return callback(err, data);
        });
      };
    };
    queue.push('f1', testf('f1', 100, null, 'data1'));
    queue.push('f2', testf('f2', 100, null, 'data2'));
    queue.push('f3', testf('f3', 100, 'error3', 'data3'));
    queue.push('f4', testf('f4', 100, null, 'data4'));
    queue.push('f5', testf('f5', 100, null, 'data5'));
    return queue.done(function(err, data){
      return test.done();
    });
  };
  exports.parallelBucket = function(test){
    var makewaiter, bucket, specificsub;
    makewaiter = function(n){
      return function(callback){
        return setTimeout(function(){
          return callback(undefined, 100 - n);
        }, n);
      };
    };
    bucket = new helpers.parallelBucket();
    makewaiter(50)(bucket.cb());
    makewaiter(60)(bucket.cb());
    makewaiter(70)(bucket.cb('bla'));
    makewaiter(80)(bucket.cb());
    makewaiter(90)(bucket.cb());
    specificsub = 0;
    bucket.on('bla', function(err, data){
      return specificsub += 1;
    });
    test.equals(bucket.n, 5);
    return bucket.done(function(err, data){
      console.log(err, data);
      test.equals(bucket.n, 0);
      test.equals(specificsub, 1);
      return bucket.on('bla', function(err, data){
        return test.done();
      });
    });
  };
  exports.remove = function(test){
    var a, b;
    a = ['bla', 'blu', 'blo'];
    helpers.remove(a, 'blu');
    test.deepEqual(a, ['bla', 'blo']);
    b = ['bla', 'blu', 'blo'];
    helpers.remove(b, 'hahaha');
    test.deepEqual(b, ['bla', 'blu', 'blo']);
    return test.done();
  };
  exports.extend = function(test){
    test.deepEqual(helpers.extend({
      bla: {
        a: 2
      }
    }, {
      bla: {
        b: 3
      },
      c: 4
    }), {
      bla: {
        a: 2,
        b: 3
      },
      c: 4
    });
    return test.done();
  };
  exports.dictpush = function(test){
    var dict;
    dict = {};
    helpers.dictpush(dict, 'testkey1', 'val1');
    helpers.dictpush(dict, 'testkey1', 'val2');
    helpers.dictpush(dict, 'testkey1', 'val3');
    helpers.dictpush(dict, 'testkey2', 'val4');
    test.deepEqual({
      "testkey1": ["val1", "val2", "val3"],
      "testkey2": ["val4"]
    }, dict);
    test.equals(helpers.dictpop(dict, 'testkey1'), 'val3');
    test.equals(helpers.dictpop(dict, 'testkey1', 'val1'), 'val1');
    test.equals(helpers.dictpop(dict, 'testkey1'), 'val2');
    test.equals(helpers.dictpop(dict, 'testkey2'), 'val4');
    test.equals(helpers.dictpop(dict, 'testkey1'), undefined);
    test.deepEqual({}, dict);
    return test.done();
  };
  exports.round = function(test){
    test.equals(helpers.round(1.12494326), 1.125);
    return test.done();
  };
  exports.normalizeList = function(test){
    var a;
    a = [1, 2, 3];
    test.deepEqual(helpers.normalize(a), [0.16666666666666666, 0.3333333333333333, 0.5]);
    return test.done();
  };
  exports.dictmap = function(test){
    test.deepEqual(helpers.dictmap({
      bla: 1,
      x: 2,
      k: 3
    }, function(n){
      return ++n;
    }), {
      bla: 2,
      x: 3,
      k: 4
    });
    return test.done();
  };
  exports.normalizeDict = function(test){
    test.deepEqual(helpers.normalize({
      bla: 1,
      x: 2,
      k: 3
    }), {
      bla: 0.16666666666666666,
      x: 0.3333333333333333,
      k: 0.5
    });
    return test.done();
  };
  exports.pad = function(test){
    test.equals(helpers.pad("bla", 5, "X"), "XXbla");
    return test.done();
  };
  exports.zip = function(test){
    var a, b;
    a = [1, 2, 3, 4];
    b = ['a', 'b', 'c'];
    test.deepEqual(helpers.zip(a, b), [[1, 'a'], [2, 'b'], [3, 'c'], [4, undefined]]);
    return test.done();
  };
  exports.squish = function(test){
    var a, b;
    a = [1, 2, 3, 4];
    b = [8, 5, 1, 1];
    test.deepEqual(helpers.squish(a, b, function(a, b){
      return a + b;
    }), [9, 7, 4, 5]);
    return test.done();
  };
  exports.mapFind = function(test){
    var a;
    a = [1, 2, 3, 4];
    test.equal(helpers.mapFind(a, function(e){
      if (e === 3) {
        return "a";
      } else {
        return false;
      }
    }), "a");
    return test.done();
  };
  exports.difference = function(test){
    var a, b, ref$, adiff, bdiff;
    a = ["bla", "faf", "bx", "gla"];
    b = ["gog", "laa", "xa", "faq"];
    ref$ = helpers.difference(a, b, function(x){
      return x + "a";
    }, function(x){
      return "b" + x;
    }), adiff = ref$[0], bdiff = ref$[1];
    console.log(a);
    console.log(b);
    console.log([adiff, bdiff]);
    return test.done();
  };
  exports.once = function(test){
    var cnt, cbcnt, testf, testfd, testcb;
    cnt = 0;
    cbcnt = 0;
    testf = function(callback){
      h.wait(100, function(){
        cnt += 1;
        return callback(undefined);
      });
      return 'x';
    };
    testfd = h.wrap.once(testf);
    testcb = function(err, data){
      cbcnt += 1;
      if (cbcnt === 3) {
        return test.done();
      }
    };
    test.equals(testfd(testcb), 'x');
    h.wait(10, function(){
      return test.equals(testfd(testcb), 'x');
    });
    h.wait(50, function(){
      return test.equals(testfd(testcb), 'x');
    });
    return h.wait(150, function(){
      return test.equals(testfd(testcb), 'x');
    });
  };
  exports.dCurry = function(test){
    var bla, bla1, bla2, ret;
    bla = function(options, x, y){
      return [options, x, y];
    };
    bla1 = h.dCurry(bla, {
      test1: 8,
      bla: 'bla',
      a: 3
    });
    bla2 = h.dCurry(bla1, {
      test1: 0,
      bla: 'xx',
      b: 5
    });
    ret = bla2({
      la: 3,
      test1: 9
    }, 1, 2);
    test.deepEqual(ret, [
      {
        test1: 9,
        bla: 'xx',
        a: 3,
        b: 5,
        la: 3
      }, 1, 2
    ]);
    return test.done();
  };
  exports.dCurryPlusCurry = function(test){
    var bla, bla1, bla2, ret, bla3, bla4;
    bla = curry$(function(options, x, y){
      return [options, x, y];
    });
    bla1 = h.dCurry(bla, {
      test1: 8,
      bla: 'bla',
      a: 3
    });
    bla2 = h.dCurry(bla1, {
      test1: 0,
      bla: 'xx',
      b: 5
    });
    ret = bla2({
      la: 3,
      test1: 9
    }, 1, 2);
    test.deepEqual(ret, [
      {
        test1: 9,
        bla: 'xx',
        a: 3,
        b: 5,
        la: 3
      }, 1, 2
    ]);
    bla3 = bla2({
      la: 3,
      test1: 9
    });
    bla4 = bla3(1);
    ret = bla4(2);
    test.deepEqual(ret, [
      {
        test1: 9,
        bla: 'xx',
        a: 3,
        b: 5,
        la: 3
      }, 1, 2
    ]);
    return test.done();
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
