// Generated by CoffeeScript 1.4.0
(function() {
  var async, helpers, _;

  helpers = require('./index.js');

  async = require('async');

  _ = require('underscore');

  exports.returnorcallback = function(test) {
    var f1, f2;
    f1 = function(n) {
      return n + 3;
    };
    f2 = function(n, callback) {
      setTimeout((function() {
        return callback(void 0, n + 4);
      }), 100);
      return void 0;
    };
    return async.parallel({
      f1: helpers.forceCallbackWrap(f1, 1),
      f2: helpers.forceCallbackWrap(f2, 1)
    }, function(err, data) {
      test.equals(err, void 0);
      test.deepEqual(data, {
        f1: 4,
        f2: 5
      });
      return test.done();
    });
  };

  exports.parallelBucket = function(test) {
    var bucket, makewaiter, specificsub;
    makewaiter = function(n) {
      return function(callback) {
        return setTimeout((function() {
          return callback(void 0, 100 - n);
        }), n);
      };
    };
    bucket = new helpers.parallelBucket();
    makewaiter(50)(bucket.cb());
    makewaiter(60)(bucket.cb());
    makewaiter(70)(bucket.cb('bla'));
    makewaiter(80)(bucket.cb());
    makewaiter(90)(bucket.cb());
    specificsub = 0;
    bucket.on('bla', function(err, data) {
      return specificsub += 1;
    });
    test.equals(bucket.n, 5);
    return bucket.done(function(err, data) {
      console.log(err, data);
      test.equals(bucket.n, 0);
      test.equals(specificsub, 1);
      return test.done();
    });
  };

  exports.remove = function(test) {
    var a, b;
    a = ['bla', 'blu', 'blo'];
    helpers.remove(a, 'blu');
    test.deepEqual(a, ['bla', 'blo']);
    b = ['bla', 'blu', 'blo'];
    helpers.remove(b, 'hahaha');
    test.deepEqual(b, ['bla', 'blu', 'blo']);
    return test.done();
  };

  exports.extend = function(test) {
    test.deepEqual(helpers.extend({
      bla: {
        a: 2
      }
    }, {
      bla: {
        b: 3
      },
      c: 4
    }), {
      bla: {
        a: 2,
        b: 3
      },
      c: 4
    });
    return test.done();
  };

  exports.dictpush = function(test) {
    var dict;
    dict = {};
    helpers.dictpush(dict, 'testkey1', 'val1');
    helpers.dictpush(dict, 'testkey1', 'val2');
    helpers.dictpush(dict, 'testkey1', 'val3');
    helpers.dictpush(dict, 'testkey2', 'val4');
    test.deepEqual({
      "testkey1": ["val1", "val2", "val3"],
      "testkey2": ["val4"]
    }, dict);
    test.equals(helpers.dictpop(dict, 'testkey1'), 'val3');
    test.equals(helpers.dictpop(dict, 'testkey1', 'val1'), 'val1');
    test.equals(helpers.dictpop(dict, 'testkey1'), 'val2');
    test.equals(helpers.dictpop(dict, 'testkey2'), 'val4');
    test.equals(helpers.dictpop(dict, 'testkey1'), void 0);
    test.deepEqual({}, dict);
    return test.done();
  };

  exports.round = function(test) {
    test.equals(helpers.round(1.12494326), 1.125);
    return test.done();
  };

  exports.normalizeList = function(test) {
    var a;
    a = [1, 2, 3];
    test.deepEqual(helpers.normalize(a), [0.16666666666666666, 0.3333333333333333, 0.5]);
    return test.done();
  };

  exports.dictmap = function(test) {
    test.deepEqual(helpers.dictmap({
      bla: 1,
      x: 2,
      k: 3
    }, function(n) {
      return ++n;
    }), {
      bla: 2,
      x: 3,
      k: 4
    });
    return test.done();
  };

  exports.normalizeDict = function(test) {
    test.deepEqual(helpers.normalize({
      bla: 1,
      x: 2,
      k: 3
    }), {
      bla: 0.16666666666666666,
      x: 0.3333333333333333,
      k: 0.5
    });
    return test.done();
  };

  exports.pad = function(test) {
    test.equals(helpers.pad("bla", 5, "X"), "XXbla");
    return test.done();
  };

}).call(this);
